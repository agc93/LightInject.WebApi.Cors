<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LightInject.WebApi.Cors</name>
    </assembly>
    <members>
        <member name="T:LightInject.WebApi.Cors.WebApiCorsExtensions">
            <summary>
            Extension methods for enabling LightInject to integrate with Web API CORS
            </summary>
        </member>
        <member name="M:LightInject.WebApi.Cors.WebApiCorsExtensions.RegisterCorsPolicies(LightInject.IServiceRegistry,LightInject.ILifetime,System.Reflection.Assembly[])">
            <summary>
            Registers all CORS policy types defined in the given assemblies, using the given <see cref="T:LightInject.ILifetime"/>
            </summary>
            <param name="serviceRegistry">The registry to register the services with</param>
            <param name="lifetime">The lifetime for the policy objects</param>
            <param name="assemblies">Assemblies to scan for types</param>
        </member>
        <member name="M:LightInject.WebApi.Cors.WebApiCorsExtensions.RegisterCorsPolicies(LightInject.IServiceRegistry,System.Reflection.Assembly[])">
            <summary>
            Registers all CORS policy types defined in the given assemblies, using the default <see cref="T:LightInject.ILifetime"/>
            </summary>
            <param name="serviceRegistry">Registry to register the policies into</param>
            <param name="assemblies">Assemblies to scan for types</param>
        </member>
        <member name="M:LightInject.WebApi.Cors.WebApiCorsExtensions.RegisterCorsPolicies(LightInject.IServiceRegistry)">
            <summary>
            Registers all CORS policy types defined in the calling <see cref="T:System.Reflection.Assembly"/>, using the default <see cref="T:LightInject.ILifetime"/>
            </summary>
            <param name="serviceRegistry">Registry to register the policies into</param>
        </member>
        <member name="M:LightInject.WebApi.Cors.WebApiCorsExtensions.EnableCors(System.Web.Http.HttpConfiguration,LightInject.IServiceContainer)">
            <summary>
            Enable CORS for the current <see cref="T:System.Web.Http.HttpConfiguration"/>, using the given <see cref="T:LightInject.IServiceContainer"/>
            </summary>
            <param name="config">The current HttpConfiguration</param>
            <param name="container">Service cotnainer with policy types</param>
        </member>
        <member name="M:LightInject.WebApi.Cors.WebApiCorsExtensions.EnableCors(LightInject.IServiceContainer,System.Web.Http.HttpConfiguration)">
            <summary>
            Use the current <see cref="T:LightInject.IServiceContainer"/> to enable CORS on the given <see cref="T:System.Web.Http.HttpConfiguration"/>
            </summary>
            <param name="container">The current service container with policy types</param>
            <param name="config">HttpConfiguration to enable CORS for.</param>
        </member>
        <member name="T:LightInject.WebApi.Cors.LightInjectPolicyFactory">
            <summary>
            A simple CORS policy provider factory using LightInject to resolve CORS policies
            </summary>
        </member>
        <member name="M:LightInject.WebApi.Cors.LightInjectPolicyFactory.#ctor(LightInject.IServiceContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:LightInject.WebApi.Cors.LightInjectPolicyFactory"/> class.
            </summary>
            <param name="serviceContainer">Service container to resolve policy types from</param>
        </member>
        <member name="M:LightInject.WebApi.Cors.LightInjectPolicyFactory.GetCorsPolicyProvider(System.Net.Http.HttpRequestMessage)">
            <summary>Gets the <see cref="T:System.Web.Http.Cors.ICorsPolicyProvider" /> for the request.</summary>
            <returns>The <see cref="T:System.Web.Http.Cors.ICorsPolicyProvider" />.</returns>
            <param name="request">The request.</param>
        </member>
    </members>
</doc>
